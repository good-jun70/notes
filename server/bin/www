#!/usr/bin/env node
//==============================================================================
// ■ Server (bin/www)
//------------------------------------------------------------------------------
//     Serve the application on a node server.
//==============================================================================
const loadDb = require("../db/");

//------------------------------------------------------------------------------
// ● App-Config
//------------------------------------------------------------------------------
const app = require("../app");
app.set("json spaces", 2);
app.set(
  "host",
  process.env.NODE_ENV === "production" ? "" : "api.ambratolm.com"
);
app.set("port", process.env.PORT || 2021);

//------------------------------------------------------------------------------
// ● HTTP-Server
//------------------------------------------------------------------------------
const http = require("http");
const server = http.createServer(app);
const { host, port, env } = app.locals.settings;
server.listen(port, host);

//------------------------------------------------------------------------------
// ● Server-Events
//------------------------------------------------------------------------------
server.on("listening", async () => {
  console.cls();
  if (env === "production") console.log("mode: ", env.info);
  console.log("api-server".bgSuccess, "server is listening...".success);
  console.log("running at:", `http://${host}:${port}`.info);
  app.locals.db = await loadDb();
  console.log("database".bgSuccess, "database is loaded.".success);
  console.log("running at:", `file-system`.info);
});
//------------------------------------------------------------------------------
server.on("error", error => {
  if (error.syscall !== "listen") throw error;
  switch (error.code) {
    case "EACCES":
      console.error(`${host}:${port} requires elevated privileges`.danger);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${host}:${port} is already in use`.danger);
      process.exit(1);
      break;
    default:
      throw error;
  }
});
